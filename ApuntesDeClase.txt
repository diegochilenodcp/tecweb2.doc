Pasos avanzados en clase de Tecnologia Web II (terminal)
*# INSTALAR APACHE2
$ sudo apt update
$ sudo apt install apache2

*# IMPLEMENTAR PHP
$ sudo apt update
$ sudo apt install php php-cli php-comon php-mysql
$ php --version

*# INSTALAR VISUAL CODE
	Descargar de la pagina web compatible con ubuntu
*# ACTUALIZAR SISTEMA UBUNTU
$ sudo apt update
$ sudo apt upgrade
$ sudo apt upgrade -y
	Una vez descargado ingresamos al directorio "Download"
	y desde la terminal ingresamos a dicho directorio
	$ cd Download/
	$ sudo apt-get install -f
	$ sudo dpkg -i "nombre del archivo instalador.debian"

*# CONFIGURAR EL TECLADO Y IDIOMA A ESPAÑOL DEL SISTEMA
$ sudo dpkg-reconfigure locales
En la configuracion del teclado seleccionar español (latinoamerica)

*# INSTALAR PROGRAMA PARA GUARDAR DE FORMA SEGURA NUESTRO TOKEN
$ sudo apt install keepassxc

*# CREAMOS CUENTA DE HITHUB Y CREAMOS UN REPOSITORIO

*# INSTALAMOS GIT
$ sudo apt update
$ sudo apt install git

*# AGREGAMOS USUARIO Y CORREO DE GITHUB EN LINEA
$ git config --global user.email "diegochileno3112@gmail.com"
$ git config --global user.name "diegochilenodcp"

*# EN EL CASO QUE YA TENGAMOS UN REPOSITORIO CREADO EN GITHUB, CLONAMOS EL REPOSITORIO EN NUESTRA SISTEMA LOCAL
$ git clone https://github.com/diegochilenodcp/tecweb2.doc.git

*# SI ES UN REPOSITORIO NUEVO AGREGAR ARCHIVO OCULTO
$ GIT INIT

*# INGRESAMOS A LA CARPETA DE NUESTRO REPOSITORIO CLONADA, UN VEZ DENTRO.

*# VERIFICAMOS CUAL ES NUESTRA RAMA "MAIN O MASTER"
	$git branch
*# DESPUES DE VERIFICAR, SUBIMOS NUESTRO ARCHIVO A GITHUB
$ git add "pasosGit.txt"
$ git commit -m "Agregue mas cosas"
$ git push origin main

*# COMANDOS PARA INSTALAR DOCKER
$ sudo apt update
$ sudo apt install apt-transport-https ca-certificates curl software-properties-common
$ curl -fsSL https://download.docker.com/linux/ubuntu/gpg | sudo apt-key add -
$ sudo add-apt-repository "deb [arch=amd64] https://download.docker.com/linux/ubuntu focal stable"
$ sudo apt update
$ apt-cache policy docker-ce
$ sudo apt install docker-ce
$ sudo systemctl status docker
$ sudo usermod -aG docker ${USER}
$ su - ${USER}
$ docker run hello-world

*# UTILIZANDO DOCKER COMPOSE
* INGRESAMOS A LA PAGINA WEB https://hub.docker.com/_/nginx

*# INSTALACION DEL PLUGIN
$ sudo apt install docker-compose-plugin

*# CREAR EL ARCHIVO "DOCKER-COMPOSE.YML" DENTRO DE LA CARPETA "DOCKER" SEGUIDO DE UNA SUBCARPETA "NGINX"

*# CONTENIDO DEL ARCHIVO "DOCKER-COMPOSE.YML"
version: '3'

services:
 web:
  image: nginx
  volumes:
   - ./code:/usr/share/nginx/html
  ports:
   - "8080:80"
  environment:
#   - NGINX_HOST=upds.lan
   - NGINX_PORT=80

*# EJECUTAMOS EL CONTENEDOR
$ docker compose up -d

*# CREAMOS UNA PAGINA WEB EN LA RUTA DOCKER/NGINX/CODE/INDEX.HTML
$ sudo mousepad code/index.html

*# INGESAMOS ETIQUETA DE PRUEBA HTML

*# LO MISMO PERO AHORA CON PHP

*# CREAMOS UNA CARPETA DENTRO DE "DOCKER" Y OTRA SUBCARPETA "PHP"

*# DENTRO DE LA CARPETA "PHP" CREAR UN DOCUMENTO "DOCKER-COMPOSE.YML"
version: '3.8'

services:
  # Apache and PHP service
  web:
    image: php:8-apache
    container_name: php-apache-container
    ports:
      - "8090:80"
    volumes:
      - ./html:/var/www/html
# Define networks
networks:
  my-network:

*# UTILIZAMOS EL SIGUIENTE COMANDO PARA HABILITAR LA CARPETA "HTML"
$ docker compose up -d

*# DENTRO DE LA CARPETA "HTML" CREMOS UN ARCHIVO.PHP

*# EN EL ARCHIVO AGREGAMOS EL CODIGO
<?php

// Show all information, defaults to INFO_ALL
phpinfo();

// Show just the module information.
// phpinfo(8) yields identical results.
phpinfo(INFO_MODULES);

?>
------------DIA 11/04/2024------------------------
------------
*# NGNIX NO LEE CODIGO PHP SOLO HTML!!!!!

*# COMANDOS EXTRAS PARA GESTIONAR DOCKER

*# LISTADO DE CONTENEDORES GENERADOS POR DOCKER
$docker compose ps

*# PARA DETENER EL CONTENEDOR
$docker compose stop

*# PARA INICIAR EL CONTENEDOR
$docker compose star

*# CAMBIAR PERMISOS Y DUEÑO DE LA CARPETA HTML
#-- DENTRO DE DOCKER/PHP
$sudo chmod 777 html/

*#VOLVER A COLOCAR LOS PRIVILEGIOS ROOT. (regresar atras)
$sudo chown -R root:root html/

*#INSTALAR PHP-CLI
$sudo apt update
$sudo apt install php-cli












